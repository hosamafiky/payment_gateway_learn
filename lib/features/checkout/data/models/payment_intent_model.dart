part of '../../imports.dart';

class PaymentIntentModel extends PaymentIntent {
  const PaymentIntentModel({
    required super.id,
    required super.object,
    required super.amount,
    required super.amountCapturable,
    required super.amountDetails,
    required super.amountReceived,
    super.application,
    super.applicationFeeAmount,
    required super.automaticPaymentMethods,
    super.canceledAt,
    super.cancellationReason,
    required super.captureMethod,
    required super.clientSecret,
    required super.confirmationMethod,
    required super.created,
    required super.currency,
    super.customer,
    super.description,
    super.excludedPaymentMethodTypes,
    super.lastPaymentError,
    super.latestCharge,
    required super.livemode,
    required super.metadata,
    super.nextAction,
    super.onBehalfOf,
    super.paymentMethod,
    required super.paymentMethodConfigurationDetails,
    required super.paymentMethodOptions,
    required super.paymentMethodTypes,
    super.processing,
    super.receiptEmail,
    super.review,
    super.setupFutureUsage,
    super.shipping,
    super.source,
    super.statementDescriptor,
    super.statementDescriptorSuffix,
    required super.status,
    super.transferData,
    super.transferGroup,
  });

  factory PaymentIntentModel.fromEntity(PaymentIntent entity) {
    return PaymentIntentModel(
      id: entity.id,
      object: entity.object,
      amount: entity.amount,
      amountCapturable: entity.amountCapturable,
      amountDetails: entity.amountDetails,
      amountReceived: entity.amountReceived,
      application: entity.application,
      applicationFeeAmount: entity.applicationFeeAmount,
      automaticPaymentMethods: entity.automaticPaymentMethods,
      canceledAt: entity.canceledAt,
      cancellationReason: entity.cancellationReason,
      captureMethod: entity.captureMethod,
      clientSecret: entity.clientSecret,
      confirmationMethod: entity.confirmationMethod,
      created: entity.created,
      currency: entity.currency,
      customer: entity.customer,
      description: entity.description,
      excludedPaymentMethodTypes: entity.excludedPaymentMethodTypes,
      lastPaymentError: entity.lastPaymentError,
      latestCharge: entity.latestCharge,
      livemode: entity.livemode,
      metadata: entity.metadata,
      nextAction: entity.nextAction,
      onBehalfOf: entity.onBehalfOf,
      paymentMethod: entity.paymentMethod,
      paymentMethodConfigurationDetails: entity.paymentMethodConfigurationDetails,
      paymentMethodOptions: entity.paymentMethodOptions,
      paymentMethodTypes: entity.paymentMethodTypes,
      processing: entity.processing,
      receiptEmail: entity.receiptEmail,
      review: entity.review,
      setupFutureUsage: entity.setupFutureUsage,
      shipping: entity.shipping,
      source: entity.source,
      statementDescriptor: entity.statementDescriptor,
      statementDescriptorSuffix: entity.statementDescriptorSuffix,
      status: entity.status,
      transferData: entity.transferData,
      transferGroup: entity.transferGroup,
    );
  }

  factory PaymentIntentModel.fromMap(Map<String, dynamic> map) {
    return PaymentIntentModel(
      id: map['id'] as String,
      object: map['object'] as String,
      amount: map['amount'] as int,
      amountCapturable: map['amount_capturable'] as int,
      amountDetails: AmountDetailsModel.fromMap(map['amount_details']),
      amountReceived: map['amount_received'] as int,
      application: map['application'],
      applicationFeeAmount: map['application_fee_amount'],
      automaticPaymentMethods: AutomaticPaymentMethodsModel.fromMap(map['automatic_payment_methods']),
      canceledAt: map['canceled_at'],
      cancellationReason: map['cancellation_reason'],
      captureMethod: map['capture_method'] as String,
      clientSecret: map['client_secret'] as String,
      confirmationMethod: map['confirmation_method'] as String,
      created: map['created'] as int,
      currency: map['currency'] as String,
      customer: map['customer'],
      description: map['description'],
      excludedPaymentMethodTypes: map['excluded_payment_method_types'],
      lastPaymentError: map['last_payment_error'],
      latestCharge: map['latest_charge'],
      livemode: map['livemode'] as bool,
      metadata: map['metadata'],
      nextAction: map['next_action'],
      onBehalfOf: map['on_behalf_of'],
      paymentMethod: map['payment_method'],
      paymentMethodConfigurationDetails: PaymentMethodConfigurationDetailsModel.fromMap(map['payment_method_configuration_details']),
      paymentMethodOptions: PaymentMethodOptionsModel.fromMap(map['payment_method_options']),
      paymentMethodTypes: List<String>.from(map['payment_method_types'] ?? []),
      processing: map['processing'],
      receiptEmail: map['receipt_email'],
      review: map['review'],
      setupFutureUsage: map['setup_future_usage'],
      shipping: map['shipping'],
      source: map['source'],
      statementDescriptor: map['statement_descriptor'],
      statementDescriptorSuffix: map['statement_descriptor_suffix'],
      status: map['status'] as String,
      transferData: map['transfer_data'],
      transferGroup: map['transfer_group'],
    );
  }

  factory PaymentIntentModel.fromJson(String source) {
    return PaymentIntentModel.fromMap(json.decode(source) as Map<String, dynamic>);
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'object': object,
      'amount': amount,
      'amount_capturable': amountCapturable,
      'amount_details': amountDetails,
      'amount_received': amountReceived,
      'application': application,
      'application_fee_amount': applicationFeeAmount,
      'automatic_payment_methods': automaticPaymentMethods,
      'canceled_at': canceledAt,
      'cancellation_reason': cancellationReason,
      'capture_method': captureMethod,
      'client_secret': clientSecret,
      'confirmation_method': confirmationMethod,
      'created': created,
      'currency': currency,
      'customer': customer,
      'description': description,
      'excluded_payment_method_types': excludedPaymentMethodTypes,
      'last_payment_error': lastPaymentError,
      'latest_charge': latestCharge,
      'livemode': livemode,
      'metadata': metadata,
      'next_action': nextAction,
      'on_behalf_of': onBehalfOf,
      'payment_method': paymentMethod,
      'payment_method_configuration_details': paymentMethodConfigurationDetails,
      'payment_method_options': paymentMethodOptions,
      'payment_method_types': paymentMethodTypes,
      'processing': processing,
      'receipt_email': receiptEmail,
      'review': review,
      'setup_future_usage': setupFutureUsage,
      'shipping': shipping,
      'source': source,
      'statement_descriptor': statementDescriptor,
      'statement_descriptor_suffix': statementDescriptorSuffix,
      'status': status,
      'transfer_data': transferData,
      'transfer_group': transferGroup,
    };
  }

  String toJson() => json.encode(toMap());
}
